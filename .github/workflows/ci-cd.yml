name: CI/CD Pipeline with SonarCloud

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# permissions:
#   contents: read
#   id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Build with Maven
        run: mvn clean install
        working-directory: ./api-gateway

      - name: SonarCloud Scan
        run: mvn sonar:sonar -Dsonar.projectKey=Moh-Bouali_api-gateway -Dsonar.organization=moh-bouali -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        working-directory: ./api-gateway

      - name: Build Docker Image
        run: docker build -t moh96/api-gateway:latest -t moh96/api-gateway:${{ github.sha }} .
        working-directory: ./api-gateway

      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install wget -y
          wget https://github.com/aquasecurity/trivy/releases/download/v0.43.0/trivy_0.43.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.43.0_Linux-64bit.deb
      
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Cache Trivy Vulnerability Database
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-java-db
          restore-keys: |
            ${{ runner.os }}-trivy-java-db

      - name: Scan Docker Image
        run: |
          for i in {1..3}; do
            trivy image --exit-code 1 --severity CRITICAL moh96/user-service:latest && break || sleep 60;
          done
      
      - name: Push Docker Image with SHA Tag
        run: docker push moh96/api-gateway:${{ github.sha }}

      - name: Push Docker Image with Latest Tag
        run: docker push moh96/api-gateway:latest

      # - name: Log in to Azure (OIDC)
      #   uses: azure/login@v1
      #   with:
      #     auth-type: 'oidc'
      #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Azure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Install Kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      # - name: Azure Login with Service Principal
      #   run: az login --service-principal -u "$AZURE_CLIENT_ID" -p "$AZURE_CLIENT_SECRET" --tenant "$AZURE_TENANT_ID"

      - name: Azure Login with Service Principal
        run: az login --service-principal -u "5b035de4-2bed-4c91-bfd3-e196653212ce" -p "njE8Q~.rf-cK5I0srOJPXSAmT1iJv5Azl-.NUcwM" --tenant "c66b6765-b794-4a2b-84ed-845b341c086a"

      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group k8s-individual-s7 --name individual-cluster-s7 --overwrite-existing

      # - name: Log in to Azure
      #   uses: azure/login@v1
      #   with:
      #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #     auth-type: SERVICE_PRINCIPAL

      # - name: Configure kubectl
      #   run: az aks get-credentials --resource-group k8s-individual-s7 --name individual-cluster-s7 --overwrite-existing

      - name: Deploy to Kubernetes
        run: |
          kubectl apply  --validate=false -f ./api-gateway/deployment/
          # kubectl apply -f ./api-gateway/deployment/api-gateway-deployment.yaml
          # kubectl apply -f ./api-gateway/deployment/api-gateway-cm0-configmap.yaml
          # kubectl apply -f ./api-gateway/deployment/api-gateway-hpa.yaml
          # kubectl apply -f ./api-gateway/deployment/api-gateway-ingress.yaml
          # kubectl apply -f ./api-gateway/deployment/api-gateway-service.yaml
